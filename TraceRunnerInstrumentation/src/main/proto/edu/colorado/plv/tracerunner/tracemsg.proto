syntax = "proto2";

package edu.colorado.plv.tracerunner_runtime_instrumentation;

message TraceMsgContainer {

  /* Defines a single message sent by the instrumented App
     The message can be of several types: AppMsg, CallinMsg,
     CallbackMsg.
  */
  message TraceMsg {
    enum MsgType {APP = 1; CALLIN_ENTRY = 2;
      CALLIN_EXIT = 3;
      CALLIN_EXEPION = 4;
      CALLBACK_ENTRY = 5;
      CALLBACK_EXIT = 6;
      CALLBACK_EXCEPTION = 7;}

    /* Identifies the type of the message */
    required MsgType type = 1;
    /* Defines the position of the message in the trace */
    required uint64 message_id = 2;
    /* id of the thread on which the message was recorded */
    required uint64 thread_id = 3;

    optional AppMsg app = 4;

    oneof oneof_message {
      CallinEntryMsg callinEntry = 5;
      CallinExitMsg callinExit = 6;
      CallinExceptionMsg callinException= 7;
      CallbackEntryMsg callbackEntry = 8;
      CallbackExitMsg callbackExit = 9;
      CallbackExceptionMsg callbackException= 10;
    }
  }

  /* Defines the information about the instrumented app. */
  message AppMsg {
    optional string app_name = 1;
  }

  /* Msg that contains the information of a callin invocation */
  message CallinEntryMsg {
    /* signature of the callin */
    required string signature = 1;
    /* name of the invoked callin */
    required string method_name = 2;
    /* list of parameters of the callin */
    repeated ValueMsg param_list = 3;
    /* object that calls this callin - document better */
    optional ValueMsg caller = 4;
  }

  message CallinExitMsg {
    /* id of the callin */
    required uint64 callin_id = 1;
    /* signature of the callin */
    required string signature = 2;
    /* return value */
    optional ValueMsg return_value = 3;
  }

  /* TODO: placeholder */
  message CallinExceptionMsg {
  }

  /* TODO: placeholder */
  message CallbackEntryMsg {
  }
  /* TODO: placeholder */
  message CallbackExitMsg {
  }
  /* TODO: placeholder */
  message CallbackExceptionMsg {
  }


  /* Object used as caller/parameter/return value */
  message ValueMsg {
    /* type of the value */
    optional string type = 1;
    /* most precise framework type */
    optional string fmwk_type = 2;
    /* id of the object */
    optional string object_id = 3;
    /* value of the object */
    optional string value = 4;
  }

  required TraceMsg msg = 1;
}
