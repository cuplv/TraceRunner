syntax = "proto2";
package edu.colorado.plv.tracerunner_runtime_instrumentation;
message TraceMsgContainer {
    /* Defines a single message sent by the instrumented App
       The message can be of several types: AppMsg, CallinMsg,
       CallbackMsg.
    */
    message TraceMsg {
        enum MsgType {APP = 1; CALLIN_ENTRY = 2;
                      CALLIN_EXIT = 3;
                      CALLIN_EXEPION = 4;
                      CALLBACK_ENTRY = 5;
                      CALLBACK_EXIT = 6;
                      CALLBACK_EXCEPTION = 7;}
        /* Identifies the type of the message */
        required MsgType type = 1;
        /* Defines the position of the message in the trace */
        required uint64 message_id = 2;
        /* id of the thread on which the message was recorded */
        required uint64 thread_id = 3;
        optional AppMsg app = 4;
        oneof oneof_message {
            CallinEntryMsg callinEntry = 5;
            CallinExitMsg callinExit = 6;
            CallinExceptionMsg callinException= 7;
            CallbackEntryMsg callbackEntry = 8;
            CallbackExitMsg callbackExit = 9;
            CallbackExceptionMsg callbackException= 10;
        }
        required bool is_activity_thread = 11;
    }
    /* Defines the information about the instrumented app. */
    message AppMsg {
        optional string app_name = 1;
    }
    /* Msg that contains the information of a callin invocation */
    message CallinEntryMsg {
        /* signature of the callin */
        required string class_name = 1; //TODO: change this to class
        /* name of the invoked callin */
        required string method_name = 2;
        /* list of parameters of the callin */
        repeated ValueMsg param_list = 3;
        /* object that calls this callin - document better */
        optional ValueMsg caller = 4;
        /* file name for the callin location */
        optional string file = 5;
        /* line number of callin */
        optional uint64 line = 6;
    }
    message CallinExitMsg {
        /* signature of the callin */
        required string class_name = 1;
        /* name of the invoked callin */
        required string method_name = 2;
        /* return value */
        optional ValueMsg return_value = 3;
    }
    message CallinExceptionMsg {
        required string throwing_class_name = 1;
        required string throwing_method_name = 2;
        required string type = 3;
        optional string exception_message = 4;
        repeated StackTrace stack_trace = 5;
    }
    message FrameworkOverride {
        required string method = 1;
        required string class_name = 2;
        required bool is_interface = 3;
    }
    message CallbackEntryMsg {
        required string class_name = 1;
        required string method_name = 2;
        repeated ValueMsg param_list = 3;
        required string callback_caller_class = 4;
        required string callback_caller_method = 5;
        repeated string method_parameter_types = 7;
        required string method_returnType = 8;
        repeated FrameworkOverride framework_overrides = 9;
        optional string receiver_first_framework_super = 10;
    }
    message CallbackExitMsg {
        required string class_name = 1;
        required string method_name = 2;
        optional ValueMsg return_value = 3;
    }
    /* TODO: is this needed? */
    message CallbackExceptionMsg {
        required string throwing_class_name = 1;
        required string throwing_method_name = 2;
        required string type = 3;
        optional string exception_message = 4;
        repeated StackTrace stack_trace = 5;

    }
    message StackTrace {
        required string method = 1;
        required string class_name = 2;
    }
    /* Object used as caller/parameter/return value */
    message ValueMsg {
        /* is the value null */
        optional bool is_null = 1;
        /* type of the value */
        optional string type = 2;
        /* most precise framework type */
        optional string fmwk_type = 3;
        /* id of the object */
        optional string object_id = 4;
        /* value of the object */
        optional string value = 5;
    }
    required TraceMsg msg = 1;
}